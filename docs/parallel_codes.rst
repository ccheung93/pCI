Running the parallel codes
==========================

basc
----

Before you run ``basc``, make sure the following input files have been appropriately generated by ``hfd``, ``bass``, and ``add``:

- ``HFD.DAT`` (obtained from basis)
- ``CONF.INP`` (obtained from add)


conf
----

Before you run ``conf``, make sure the following input files have been appropriately generated by ``hfd``, ``bass``, ``add``, and ``basc``:

- ``HFD.DAT`` (obtained from basis)
- ``CONF.INP`` (obtained from add)
- ``CONF.DAT`` (obtained from basc)
- ``CONF.GNT`` (obtained from basc)
- ``CONF.INT`` (obtained from basc)
- ``SGC.CON`` (optionally obtained from all-order) 
- ``SCRC.CON`` (optionally obtained from all-order) 

Next, you must create a file named ``c.in`` with the following parameters:

.. code-block:: 

    Kl         ! (0 - start, 1 - continue calculation, 2 - include corrections, 3 - add configurations)
    Ksig       ! (0 - pure CI, 1 - include one-electron corrections, 2 - include one- and two-electron corrections)
    Kdsig      ! (0 - no energy dependence on Sigma, 1 - energy dependence on Sigma)
    Kw         ! (0 - do not write CONF.HIJ, 1 - write CONF.HIJ)
    kLSJ       ! (0 - do not calculate expectation values of S^2 and L^2 and form approximate terms for each energy level, 1 - calculate LSJ)


To run parallel ``conf``, run the command:

.. code-block:: 

    mpirun -n <nprocs> ./conf

dtm
---
Before you run ``dtm``, make sure the following input files have been appropriately generated by ``conf``:


ine
---

Before parallel ``ine`` can be run, the parallel matrix files ``CONFp.HIJ`` and ``CONFp.JJJ`` have to be sorted. This can be done using the python script ``/pCI/src/auxiliary/sort.py``. 

1. First load the python3
   
    .. code-block:: 

        vpkg_require python/3
    

2. Run python script ``sort.py``
   
    .. code-block:: 

        python3 sort.py
    

3. The program will ask which file you want sorted, so enter ``CONFp.HIJ`` or ``CONFp.JJJ``
   
    .. code-block:: 

        CONFp.HIJ


4. Now re-run the program for the other matrix
   
    .. code-block:: 

        python3 sort.py  
        CONFp.JJJ

After these files are obtained, you can run the parallel version of ``ine``. This requires the input file ``ine.in``:

.. code-block:: 

    0                          | kIters= (0- invert and iterate if diverged, 1-invert only, 2-2-step iteration)
    0                          | Kl = (0-new, 1-use X1, 2-use X1,Y1,Y2)
    2                          | Kli = (1 - H_p, 2 - E1(L), 5 - E2) for RHS of equation
    2                          | Klf = (1 - H_p, 2 - E1(L), 3 - H_am, 4 - E1(V), 5 - E2) for LHS of equation
    5                          | N0 = record number of X0
    5                          | N2 = record number of X2
    3                          | nlambda - number of ranges of wavelengths to include (in this case, 3)
    813.01 813.02 0.01         | range 1   (lambda1, lambda2, step_size)
    813.02 813.025 0.001       | range 2
    813.025 813.03 0.01        | range 3
